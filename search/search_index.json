{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Clarity CLI Docs","text":"<p>Select a version:</p> <ul> <li>Latest (1.0.7)</li> <li>(1.0.0)</li> </ul> <p>Use the version selector in the top-left corner of the site to switch between releases.</p>"},{"location":"#whats-new-in-clarity-cli-107","title":"\ud83d\udd04 What\u2019s New in Clarity CLI 1.0.7","text":""},{"location":"#command-enhancements","title":"\u2705 Command Enhancements","text":"<ul> <li><code>clarity generate-report</code><ul> <li>Improved component handling with:<ul> <li><code>--report-type, -r [PDF|CSV]</code>: Report format (default: PDF)</li> <li><code>--execution-id, -e TEXT</code>: Specify the execution ID to generate report for</li> <li><code>--project-id, -proj TEXT</code>: Specify the project ID</li> <li><code>--profile, -p TEXT</code>: Profile to use</li> <li><code>--override-config-path, -cfg TEXT</code>: Path to config.json</li> </ul> </li> </ul> </li> </ul>"},{"location":"#examples","title":"Examples","text":""},{"location":"1.0.0/","title":"Clarity CLI \ud83d\ude80","text":"<p>Interactive command-line tool for test management, profile handling, and component uploads to CyClarity.</p> <p>Why another CLI? Clarity CLI bundles everyday actions (login, test execution, artifact upload) into a single, script-friendly interface\u2014so you can automate your QA pipelines without juggling multiple tools.</p>"},{"location":"1.0.0/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code>pip install clarity-cli\n</code></pre>"},{"location":"1.0.0/#quick-start","title":"\u26a1 Quick start","text":"<pre><code># 1\ufe0f\u20e3  Configure a profile (once)\nclarity profile-setup   --profile dev   --client-id &lt;ID&gt;   --client-secret &lt;SECRET&gt;   --token-endpoint https://auth.example.com/oauth/token   --scope \"clarity offline_access\"   --project 42 --workspace 7 --agent-id AGENT_1   --default\n\n# 2\ufe0f\u20e3  Log in (refreshes &amp; stores JWT)\nclarity login --profile dev\n\n# 3\ufe0f\u20e3  Run a single test\nclarity execute --test-id TEST-123\n</code></pre>"},{"location":"1.0.0/#config-files-profiles","title":"\ud83d\uddc2 Config files &amp; profiles","text":"File / Dir Purpose Default location <code>config.json</code> Stores profiles &amp; tokens <code>~/.clarity/config.json</code> <code>~/.clarity/</code> Root config directory (auto-created) \u2013 <p>Profiles let you switch between environments (dev, staging, prod) without re-entering secrets.</p>"},{"location":"1.0.0/#command-reference","title":"\ud83d\udee0 Command reference","text":""},{"location":"1.0.0/#clarity-execute","title":"<code>clarity execute</code>","text":"<p>Run a test interactively or headless.</p> Option Description Example <code>-t, --test-id</code> Execute a specific test immediately. <code>-t TEST-123</code> <code>-p, --profile</code> Profile to use (falls back to default). <code>-p prod</code> <code>-c, --override-config-path</code> Use an alternative <code>config.json</code>. <code>-c ./tmp/config.json</code> <code>--project</code> Override default project ID. <code>--project 99</code> <code>--workspace</code> Override default workspace ID. <code>--workspace 5</code> <code>--agent-id</code> Run on a specific agent. <code>--agent-id AGENT_2</code> <code>--parameters-file</code> JSON file with flow variable values. <code>--parameters-file vars.json</code> <pre><code>clarity execute -t TEST-123 --parameters-file vars.json\n</code></pre>"},{"location":"1.0.0/#clarity-profile-setup","title":"<code>clarity profile-setup</code>","text":"<p>Create or update a profile.</p> Option Required? Description <code>--profile, -p</code> \u2714 Profile name (e.g. <code>prod</code>). <code>--client-id, -id</code> \u2714 OAuth client ID. <code>--client-secret, -cs</code> \u2714 OAuth client secret. <code>--token-endpoint, -e</code> \u2714 OAuth token URL. <code>--scope, -s</code> \u2714 Space-separated OAuth scopes. <code>--project, --workspace, --agent-id</code> \u2013 Default IDs for operations. <code>--domain</code> \u2013 Override Clarity domain (multi-tenant). <code>--default, -d</code> \u2013 Mark as the default profile. <pre><code>clarity profile-setup -p staging -id XXX -cs YYY -e https://auth/staging/token -s \"clarity\"\n</code></pre>"},{"location":"1.0.0/#clarity-login","title":"<code>clarity login</code>","text":"<p>Refresh and cache an access token.</p> Option Description <code>-p, --profile</code> Profile to log in with (defaults to default). <code>-c, --override-config-path</code> Alternate <code>config.json</code> location. <pre><code>clarity login -p prod\n</code></pre>"},{"location":"1.0.0/#clarity-upload","title":"<code>clarity upload</code>","text":"<p>Package &amp; upload a component.</p> Option Description <code>--component-path</code> Path to the Poetry project (defaults to CWD). <code>-e, --entrypoint</code> <code>module:function</code> entrypoint. <code>-r, --running-env</code> Target runtime (<code>IOT</code> or <code>CLOUD</code>). <code>--pyc</code> Compile to <code>*.pyc</code> before upload. <code>-y</code> Non-interactive \u201cyes to all\u201d. <pre><code>clarity upload   --component-path ./my_component   --entrypoint my_component.main:handler   -r CLOUD --pyc -y\n</code></pre>"},{"location":"1.0.0/#verbose-mode","title":"\ud83e\udd16 Verbose mode","text":"<p>Add <code>-v</code> after <code>clarity</code> (before sub-commands) to print debug logs:</p> <pre><code>clarity -v execute -t TEST-123\n</code></pre> <p>Last updated: 05\u201106\u20112025</p>"},{"location":"1.0.1/","title":"Clarity CLI \ud83d\ude80","text":"<p>Interactive command-line tool for test management, profile handling, and component uploads to CyClarity.</p> <p>Why another CLI? Clarity CLI bundles everyday actions (login, test execution, artifact upload) into a single, script-friendly interface\u2014so you can automate your QA pipelines without juggling multiple tools.</p>"},{"location":"1.0.1/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code>pip install clarity-cli\n</code></pre>"},{"location":"1.0.1/#quick-start","title":"\u26a1 Quick start","text":"<pre><code># 1\ufe0f\u20e3  Configure a profile (once)\nclarity profile-setup   --profile dev   --client-id &lt;ID&gt;   --client-secret &lt;SECRET&gt;   --token-endpoint https://auth.example.com/oauth/token   --scope \"clarity offline_access\"   --project 42 --workspace 7 --agent_id AGENT_1   --default\n\n# 2\ufe0f\u20e3  Log in (refreshes &amp; stores JWT)\nclarity login --profile dev\n\n# 3\ufe0f\u20e3  Run a single test\nclarity execute --test-id TEST-123\n</code></pre>"},{"location":"1.0.1/#config-files-profiles","title":"\ud83d\uddc2 Config files &amp; profiles","text":"File / Dir Purpose Default location <code>config.json</code> Stores profiles &amp; tokens <code>~/.clarity/config.json</code> <code>~/.clarity/</code> Root config directory (auto-created) \u2013 <p>Profiles let you switch between environments (dev, staging, prod) without re-entering secrets.</p>"},{"location":"1.0.1/#command-reference","title":"\ud83d\udee0 Command reference","text":""},{"location":"1.0.1/#clarity-execute","title":"<code>clarity execute</code>","text":"<p>Run a test or plan interactively or headless.</p> Option Description Example <code>--test-id, -t</code> Execute a specific test. <code>--test-id TEST-123</code> <code>--plan-id, -t</code> Execute a specific plan. <code>--plan-id PLAN-42</code> <code>--profile, -p</code> Profile to use. <code>--profile prod</code> <code>--override-config-path, -c</code> Path to <code>config.json</code>. <code>--override-config-path ./config.json</code> <code>--project, -proj</code> Override project ID. <code>--project 99</code> <code>--workspace, -w</code> Override workspace ID. <code>--workspace 5</code> <code>--agent-id, -a</code> Run on specific agent. <code>--agent-id AGENT_2</code> <code>--parameters-file</code> Flow variable values (JSON). <code>--parameters-file vars.json</code> <code>-y</code> Non-interactive, assume yes. <code>-y</code> <pre><code>clarity execute --test-id TEST-123 --parameters-file vars.json\n</code></pre>"},{"location":"1.0.1/#clarity-profile-setup","title":"<code>clarity profile-setup</code>","text":"<p>Create or update a profile.</p> Option Required? Description <code>--profile, -p</code> \u2714 Profile name. <code>--client-id, -id</code> \u2714 OAuth client ID. <code>--client-secret, -cs</code> \u2714 OAuth client secret. <code>--token-endpoint, -e</code> \u2714 OAuth token URL. <code>--scope, -s</code> \u2714 OAuth scopes (space-separated). <code>--project, -proj</code> \u2013 Default project ID. <code>--workspace, -w</code> \u2013 Default workspace ID. <code>--agent_id, -a</code> \u2013 Default agent ID. <code>--domain</code> \u2013 Override Clarity domain. <code>--default, -d</code> \u2013 Set as default profile. <pre><code>clarity profile-setup -p staging -id XXX -cs YYY -e https://auth/staging/token -s \"clarity\"\n</code></pre>"},{"location":"1.0.1/#clarity-login","title":"<code>clarity login</code>","text":"<p>Log in with a saved profile and retrieve a new token.</p> Option Description <code>--profile, -p</code> Profile to use (fallback to default). <code>--override-config-path, -c</code> Path to <code>config.json</code>. <pre><code>clarity login -p prod\n</code></pre>"},{"location":"1.0.1/#clarity-upload","title":"<code>clarity upload</code>","text":"<p>Package &amp; upload a component to CyClarity.</p> Option Description <code>--profile, -p</code> Profile to use. <code>--override-config-path, -c</code> Path to <code>config.json</code>. <code>--component-path</code> Path to Poetry project. <code>--entrypoint, -e</code> Format: <code>module:function</code>. <code>--running-env, -r</code> Target runtime: <code>IOT</code> or <code>CLOUD</code>. <code>--pyc</code> Compile <code>.pyc</code> before upload. <code>-y</code> Non-interactive, assume yes. <pre><code>clarity upload --component-path ./my_component --entrypoint my_component.main:handler -r CLOUD --pyc -y\n</code></pre>"},{"location":"1.0.1/#verbose-mode","title":"\ud83e\udd16 Verbose mode","text":"<p>Add <code>-v</code> before the subcommand to enable debug logs:</p> <pre><code>clarity -v execute --test-id TEST-123\n</code></pre> <p>Last updated: 23\u201106\u20112025</p>"},{"location":"1.0.7/","title":"Clarity CLI \ud83d\ude80","text":"<p>Interactive command-line tool for test management, profile handling, and component uploads to CyClarity.</p> <p>Why another CLI? Clarity CLI bundles everyday actions (login, test execution, artifact upload) into a single, script-friendly interface\u2014so you can automate your QA pipelines without juggling multiple tools.</p>"},{"location":"1.0.7/#installation","title":"\ud83d\udce6 Installation","text":"<pre><code>pip install clarity-cli\n</code></pre>"},{"location":"1.0.7/#quick-start","title":"\u26a1 Quick start","text":"<pre><code># 1\ufe0f\u20e3  Configure a profile (once)\nclarity profile-setup   --profile dev   --client-id &lt;ID&gt;   --client-secret &lt;SECRET&gt;   --token-endpoint https://auth.example.com/oauth/token   --scope \"clarity offline_access\"   --project 42 --workspace 7 --agent_id AGENT_1   --default\n\n# 2\ufe0f\u20e3  Log in (refreshes &amp; stores JWT)\nclarity login --profile dev\n\n# 3\ufe0f\u20e3  Run a single test\nclarity execute --test-id TEST-123\n</code></pre>"},{"location":"1.0.7/#config-files-profiles","title":"\ud83d\uddc2 Config files &amp; profiles","text":"File / Dir Purpose Default location <code>config.json</code> Stores profiles &amp; tokens <code>~/.clarity/config.json</code> <code>~/.clarity/</code> Root config directory (auto-created) \u2013 <p>Profiles let you switch between environments (dev, staging, prod) without re-entering secrets.</p>"},{"location":"1.0.7/#command-reference","title":"\ud83d\udee0 Command reference","text":""},{"location":"1.0.7/#clarity-execute","title":"<code>clarity execute</code>","text":"<p>Run a test or plan interactively or headless.</p> Option Description Example <code>--test-id, -t</code> Execute a specific test. <code>--test-id TEST-123</code> <code>--plan-id, -t</code> Execute a specific plan. <code>--plan-id PLAN-42</code> <code>--profile, -p</code> Profile to use. <code>--profile prod</code> <code>--override-config-path, -c</code> Path to <code>config.json</code>. <code>--override-config-path ./config.json</code> <code>--project, -proj</code> Override project ID. <code>--project 99</code> <code>--workspace, -w</code> Override workspace ID. <code>--workspace 5</code> <code>--agent-id, -a</code> Run on specific agent. <code>--agent-id AGENT_2</code> <code>--parameters-file</code> Flow variable values (JSON). <code>--parameters-file vars.json</code> <code>-y</code> Non-interactive, assume yes. <code>-y</code> <pre><code>clarity execute --test-id TEST-123 --parameters-file vars.json\n</code></pre>"},{"location":"1.0.7/#clarity-profile-setup","title":"<code>clarity profile-setup</code>","text":"<p>Create or update a profile.</p> Option Required? Description <code>--profile, -p</code> \u2714 Profile name. <code>--client-id, -id</code> \u2714 OAuth client ID. <code>--client-secret, -cs</code> \u2714 OAuth client secret. <code>--token-endpoint, -e</code> \u2714 OAuth token URL. <code>--scope, -s</code> \u2714 OAuth scopes (space-separated). <code>--project, -proj</code> \u2013 Default project ID. <code>--workspace, -w</code> \u2013 Default workspace ID. <code>--agent_id, -a</code> \u2013 Default agent ID. <code>--domain</code> \u2013 Override Clarity domain. <code>--default, -d</code> \u2013 Set as default profile. <pre><code>clarity profile-setup -p staging -id XXX -cs YYY -e https://auth/staging/token -s \"clarity\"\n</code></pre>"},{"location":"1.0.7/#clarity-login","title":"<code>clarity login</code>","text":"<p>Log in with a saved profile and retrieve a new token.</p> Option Description <code>--profile, -p</code> Profile to use (fallback to default). <code>--override-config-path, -c</code> Path to <code>config.json</code>. <pre><code>clarity login -p prod\n</code></pre>"},{"location":"1.0.7/#clarity-upload","title":"<code>clarity upload</code>","text":"<p>Package &amp; upload a component to CyClarity.</p> Option Description <code>--profile, -p</code> Profile to use. <code>--override-config-path, -c</code> Path to <code>config.json</code>. <code>--component-path</code> Path to Poetry project. <code>--entrypoint, -e</code> Format: <code>module:function</code>. <code>--running-env, -r</code> Target runtime: <code>IOT</code> or <code>CLOUD</code>. <code>--pyc</code> Compile <code>.pyc</code> before upload. <code>-y</code> Non-interactive, assume yes. <pre><code>clarity upload --component-path ./my_component --entrypoint my_component.main:handler -r CLOUD --pyc -y\n</code></pre>"},{"location":"1.0.7/#clarity-get-findings","title":"<code>clarity get-findings</code>","text":"<p>Retrieve and display findings from a specific test execution with pagination support.</p> Option Description <code>--execution-id, -e</code> Execution ID to get findings for (required if not interactive). <code>--output-type, -o</code> Output format: <code>table</code> (default) or <code>json</code>. <code>--file-path, -f</code> Optional file path to save findings data as JSON. <code>--page-size, -s</code> Number of findings per page (default: 20, use 0 for no pagination). <code>--profile, -p</code> Profile to use (fallback to default). <code>--override-config-path, -c</code> Path to <code>config.json</code>."},{"location":"1.0.7/#features","title":"Features","text":"<ul> <li>Smart Pagination: Shows first 20 findings in terminal, saves remaining to file</li> <li>Interactive Navigation: When using pagination, navigate with simple commands</li> <li>Multiple Output Formats: Table view for terminal, JSON for automation</li> <li>File Export: Automatically saves large result sets to timestamped JSON files</li> </ul>"},{"location":"1.0.7/#examples","title":"Examples","text":"<pre><code># Basic usage - shows first 20 findings in table format\nclarity get-findings --execution-id TestExecution_123\n\n# Get all findings without pagination\nclarity get-findings --execution-id TestExecution_123 --page-size 0\n\n# Export to JSON file\nclarity get-findings --execution-id TestExecution_123 --output-type json --file-path findings.json\n\n</code></pre>"},{"location":"1.0.7/#pagination-behavior","title":"Pagination Behavior","text":"<p>When you have more than 20 findings (or your specified page size):</p> <ol> <li>Terminal Display: Shows first N findings in a formatted table</li> <li>Automatic File Save: Remaining findings saved to <code>findings_ExecutionID_timestamp.json</code></li> <li>Clickable Link: Provides file path for easy access to complete data</li> </ol> <p>Example Output:</p> <pre><code>Execution Findings (Showing first 20 of 250)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Finding type\u2502 Step name \u2502 Purpose \u2502 Description \u2502 Topic \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ...         \u2502 ...       \u2502 ...     \u2502 ...         \u2502 ...   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n230 additional findings saved to file:\n\ud83d\udcc4 findings_TestExecution_123_20241220_143052.json\nFull path: /your/current/directory/findings_TestExecution_123_20241220_143052.json\n</code></pre>"},{"location":"1.0.7/#verbose-mode","title":"\ud83e\udd16 Verbose mode","text":"<p>Add <code>-v</code> before the subcommand to enable debug logs:</p> <pre><code>clarity -v execute --test-id TEST-123\n</code></pre>"},{"location":"1.0.7/#report-generation-guide","title":"Report Generation Guide","text":"<p>This guide explains how to use the <code>generate-report</code> command and understand the different response scenarios for automation purposes.</p>"},{"location":"1.0.7/#command-usage","title":"Command Usage","text":"<pre><code>clarity generate-report [OPTIONS]\n</code></pre>"},{"location":"1.0.7/#options","title":"Options","text":"<ul> <li><code>--report-type, -r [PDF|CSV]</code>: Report format (default: PDF)</li> <li><code>--execution-id, -e TEXT</code>: Specify the execution ID to generate report for</li> <li><code>--project-id, -proj TEXT</code>: Specify the project ID</li> <li><code>--profile, -p TEXT</code>: Profile to use</li> <li><code>--override-config-path, -cfg TEXT</code>: Path to config.json</li> </ul>"},{"location":"1.0.7/#examples_1","title":"Examples","text":"<pre><code># Generate PDF report (default)\nclarity generate-report --execution-id TestExecution_123 --project-id TestProj --report-type PDF --profile \"\"\n\n# Generate CSV report\nclarity generate-report --execution-id TestExecution_123 --project-id TestProj --report-type CSV --profile \"\"\n\n# Interactive mode (will prompt for missing parameters)\nclarity generate-report --report-type PDF\n</code></pre>"},{"location":"1.0.7/#response-scenarios","title":"Response Scenarios","text":"<p>The system returns different responses based on the current status of the report generation process.</p>"},{"location":"1.0.7/#1-report-completed","title":"1. Report Completed \u2705","text":"<p>When: Report generation is finished and file is available for download</p> <p>Response Format:</p> <pre><code>{\n  \"statusCode\": 200,\n  \"body\": {\n    \"presigned_url_link\": \"https://s3-presigned-url-to-download-file\"\n  }\n}\n</code></pre> <p>CLI Output:</p> <pre><code>\u2705 Report generation completed!\n\ud83d\udcc4 PDF Report is ready!\nDownload URL: https://s3-presigned-url-to-download-file\nYou can copy and paste this URL into your browser\n</code></pre> <p>For Automation:  - Condition: Response contains <code>presigned_url_link</code> with actual URL - Action: Download the file using the provided URL - The URL is a time-limited presigned S3 URL</p>"},{"location":"1.0.7/#2-report-in-progress","title":"2. Report In Progress \ud83d\udd04","text":"<p>When: Report generation has been triggered and is currently running</p> <p>Response Format:</p> <pre><code>{\n  \"statusCode\": 200,\n  \"body\": {\n    \"message\": \"Report generation in process.\"\n  }\n}\n</code></pre> <p>CLI Output:</p> <pre><code>\u26a0\ufe0f  Report generation in process.\nYou can run this command again later to check the status\n</code></pre> <p>For Automation: - Condition: Response contains <code>message</code> field (typically \"Report generation in process.\") - Action: Wait and retry the command after some time (recommended: 30-60 seconds) - Continue polling until you get a presigned URL or failure message</p>"},{"location":"1.0.7/#3-report-not-started","title":"3. Report Not Started \ud83d\udccb","text":"<p>When: No report generation has been initiated for this execution</p> <p>Response Format:</p> <pre><code>{\n  \"statusCode\": 200,\n  \"body\": {\n    \"presigned_url_link\": \"\"\n  }\n}\n</code></pre> <p>CLI Output:</p> <pre><code>\u26a0\ufe0f  Report is not ready yet. No download link available.\nYou can run this command again later to check the status\n</code></pre> <p>For Automation: - Condition: Response contains <code>presigned_url_link</code> with empty string value - Action: The CLI will automatically trigger report generation - After triggering, subsequent checks will show \"Report generation in process.\"</p>"},{"location":"1.0.7/#4-report-failed","title":"4. Report Failed \u274c","text":"<p>When: Report generation encountered an error and failed</p> <p>Response Format:</p> <pre><code>{\n  \"statusCode\": 400,\n  \"body\": {\n    \"message\": \"Report generation has failed.\"\n  }\n}\n</code></pre> <p>CLI Output:</p> <pre><code>\u274c Report generation has failed.\n</code></pre> <p>For Automation: - Condition: Response has <code>statusCode: 400</code> with error message - Action: Check execution logs or retry the command - May require manual intervention</p>"},{"location":"1.0.7/#automation-workflow","title":"Automation Workflow","text":"<p>Here's a recommended automation workflow:</p>"},{"location":"1.0.7/#python-example","title":"Python Example","text":"<pre><code>import subprocess\nimport json\nimport time\n\ndef wait_for_report(execution_id, project_id,  profile, report_type):\n    \"\"\"\n    Wait for report generation to complete and return download URL\n    Continues indefinitely until report is ready or fails\n    \"\"\"\n    attempt = 0\n\n    while True:\n        attempt += 1\n        try:\n            # Run the CLI command\n            result = subprocess.run([\n                'clarity', 'generate-report',\n                '--profile', profile,\n                '--execution-id', execution_id,\n                '--project-id', project_id,\n                '--report-type', report_type\n            ], capture_output=True, text=True)\n\n            # Check the actual CLI output messages (regardless of return code)\n            output = result.stdout + result.stderr\n\n            if \"Report is ready\" in output or \"Download URL:\" in output:\n                # Report completed successfully\n                print(\"Report ready! Check CLI output for download URL\")\n                print(f\"Output: {output}\")\n                return True\n            elif \"Report generation in process\" in output:\n                print(f\"Attempt {attempt}: Report still generating...\")\n                time.sleep(30)  # Wait 30 seconds\n            elif \"Report generation has failed\" in output:\n                print(\"Report generation failed!\")\n                return False\n            elif \"Report is not ready yet\" in output:\n                print(\n                    f\"Attempt {attempt}: Report not started, will be triggered...\")\n                time.sleep(15)  # Wait 15 seconds\n            elif \"Generating\" in output and \"Report\" in output:\n                # This handles the initial \"Generating PDF Report\" message\n                print(f\"Attempt {attempt}: Starting report generation...\")\n                time.sleep(15)  # Wait 15 seconds\n            else:\n                print(f\"Attempt {attempt}: Checking status...\")\n                print(f\"Output: {output}\")\n                time.sleep(15)  # Wait and try again\n\n        except KeyboardInterrupt:\n            print(\"\\nStopped by user (Ctrl+C)\")\n            return False\n        except Exception as e:\n            print(f\"Error running command: {e}\")\n            return False\n\n# Usage\nif wait_for_report(\"TestExecution_123\", \"TestProj\", \"PDF\"):\n    print(\"Success! Download the report using the provided URL\")\nelse:\n    print(\"Failed to generate report or stopped by user\")\n</code></pre>"},{"location":"1.0.7/#report-types","title":"Report Types","text":""},{"location":"1.0.7/#pdf-reports","title":"PDF Reports","text":"<ul> <li>Format: Portable Document Format</li> <li>Content: Comprehensive test execution report with findings, charts, and detailed analysis</li> <li>Use Case: Human-readable reports, presentations, documentation</li> <li>File Extension: <code>.pdf</code></li> </ul>"},{"location":"1.0.7/#csv-reports","title":"CSV Reports","text":"<ul> <li>Format: Comma-Separated Values</li> <li>Content: Structured data export of findings and execution details</li> <li>Use Case: Data analysis, integration with other tools, spreadsheet import</li> <li>File Extension: <code>.csv</code></li> </ul>"},{"location":"1.0.7/#getting-help","title":"Getting Help","text":"<p>For additional support: - Check the main CLI documentation - Use <code>clarity-cli generate-report --help</code> for command options - Contact your system administrator for access issues</p> <p>Last updated: 23\u201106\u20112025</p>"}]}